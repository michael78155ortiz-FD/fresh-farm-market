// src/app/market/vendor/[id]/page.tsx
import Link from "next/link";
import { notFound } from "next/navigation";
import { getAdminSupabase } from "@/lib/supabaseAdmin";

export const dynamic = "force-dynamic";
export const revalidate = 0;
export const fetchCache = "default-no-store";
export const runtime = "nodejs";

type Vendor = {
  id: string;
  name: string;
  category?: string | null;
  image_url?: string | null;
  description?: string | null;
};

type Product = {
  id: string;
  name: string;
  price_cents: number;
  description?: string | null;
  image_url?: string | null;
};

function money(cents: number) {
  return new Intl.NumberFormat(undefined, { style: "currency", currency: "USD" })
    .format(cents / 100);
}

export default async function VendorPage({ params }: { params: { id: string } }) {
  const vendorId = params.id;
  const supabase = getAdminSupabase();

  if (!supabase) {
    return (
      <main className="mx-auto max-w-7xl px-4 py-8">
        <div className="rounded-2xl border bg-white p-12 text-center">
          <p className="text-gray-600">Vendor page not available</p>
        </div>
      </main>
    );
  }

  const [vendorResult, productsResult] = await Promise.all([
    supabase.from("vendors").select("*").eq("id", vendorId).eq("approved", true).single(),
    supabase.from("products").select("*").eq("vendor_id", vendorId).eq("active", true),
  ]);

  if (vendorResult.error || !vendorResult.data) {
    notFound();
  }

  const vendor: Vendor = vendorResult.data;
  const products: Product[] = productsResult.data ?? [];

  return (
    <main className="mx-auto max-w-7xl px-4 py-8">
      <Link href="/market" className="mb-6 inline-flex items-center text-sm font-medium text-green-600 hover:text-green-700">
        <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
        </svg>
        Back to Market
      </Link>

      <div className="mb-8 overflow-hidden rounded-2xl border bg-white shadow-sm">
        <div className="relative h-64 w-full bg-gradient-to-br from-green-50 to-green-100">
          {vendor.image_url ? (
            <img src={vendor.image_url} alt={vendor.name} className="h-full w-full object-cover" />
          ) : (
            <div className="flex h-full w-full items-center justify-center">
              <span className="text-9xl">üè™</span>
            </div>
          )}
        </div>

        <div className="p-6">
          <div className="flex items-start justify-between">
            <div>
              <h1 className="mb-2 text-3xl font-bold text-gray-900">{vendor.name}</h1>
              {vendor.category && (
                <span className="inline-block rounded-full bg-green-100 px-3 py-1 text-sm font-medium text-green-800">
                  {vendor.category}
                </span>
              )}
            </div>
          </div>
          {vendor.description && <p className="mt-4 text-gray-600">{vendor.description}</p>}
        </div>
      </div>

      <h2 className="mb-4 text-2xl font-bold text-gray-900">Products</h2>
      {products.length === 0 ? (
        <div className="rounded-2xl border bg-white p-12 text-center">
          <p className="text-gray-600">No products available yet.</p>
        </div>
      ) : (
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {products.map((p) => (
            <div key={p.id} className="group overflow-hidden rounded-2xl border bg-white shadow-sm transition-all hover:shadow-lg">
              <div className="relative h-48 w-full overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100">
                {p.image_url ? (
                  <img src={p.image_url} alt={p.name} className="h-full w-full object-cover transition-transform group-hover:scale-105" />
                ) : (
                  <div className="flex h-full w-full items-center justify-center">
                    <span className="text-6xl">ü•¨</span>
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="mb-1 text-lg font-semibold text-gray-900">{p.name}</h3>
                {p.description && <p className="mb-3 line-clamp-2 text-sm text-gray-600">{p.description}</p>}
                <div className="flex items-center justify-between">
                  <span className="text-lg font-bold text-green-700">{money(p.price_cents)}</span>
                  <button className="rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition hover:bg-green-700">
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </main>
  );
}
